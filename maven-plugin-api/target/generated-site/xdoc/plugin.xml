<?xml version="1.0"?>
<!-- =================== DO NOT EDIT THIS FILE ====================         -->
<!-- Generated by Modello 1.11,                                             -->
<!-- any modifications will be overwritten.                                 -->
<!-- ==============================================================         -->
<document>
  <properties>
    <title>PluginDescriptor</title>
  </properties>
  <body>
    <section name="PluginDescriptor">
      <p>Plugin descriptor, stored in 
<code>META-INF/maven/plugin.xml</code> in a plugin's jar artifact. This descriptor is generally generated from plugin sources, using 
<a href="/plugins/maven-plugin-plugin/">maven-plugin-plugin</a>. 
<p><i>Notice:</i> this documentation is generated from a Modello model but the code executed is not generated from this descriptor. Please report if you find anything wrong.</p></p>
      <source>
&lt;<a href="#class_plugin">plugin</a>&gt;
  &lt;name/&gt;
  &lt;description/&gt;
  &lt;groupId/&gt;
  &lt;artifactId/&gt;
  &lt;version/&gt;
  &lt;goalPrefix/&gt;
  &lt;isolatedRealm/&gt;
  &lt;inheritedByDefault/&gt;

  &lt;mojos&gt;
    &lt;<a href="#class_mojo">mojo</a>&gt;
      &lt;goal/&gt;
      &lt;description/&gt;
      &lt;implementation/&gt;
      &lt;language/&gt;
      &lt;phase/&gt;
      &lt;executePhase/&gt;
      &lt;executeGoal/&gt;
      &lt;executeLifecycle/&gt;
      &lt;requiresDependencyResolution/&gt;
      &lt;requiresDependencyCollection/&gt;
      &lt;requiresDirectInvocation/&gt;
      &lt;requiresProject/&gt;
      &lt;requiresReports/&gt;
      &lt;requiresOnline/&gt;
      &lt;aggregator/&gt;
      &lt;inheritedByDefault/&gt;
      &lt;threadSafe/&gt;
      &lt;instantiationStrategy/&gt;
      &lt;executionStrategy/&gt;
      &lt;since/&gt;
      &lt;deprecated/&gt;
      &lt;configurator/&gt;
      &lt;composer/&gt;

      &lt;parameters&gt;
        &lt;<a href="#class_parameter">parameter</a>&gt;
          &lt;name/&gt;
          &lt;alias/&gt;
          &lt;type/&gt;
          &lt;required/&gt;
          &lt;editable/&gt;
          &lt;implementation/&gt;
          &lt;description/&gt;
          &lt;since/&gt;
          &lt;deprecated/&gt;
        &lt;/parameter&gt;
      &lt;/parameters&gt;
      &lt;configuration&gt;
        &lt;<a href="#class_paramName">paramName</a> implementation=.. default-value=.. /&gt;
      &lt;/configuration&gt;

      &lt;requirements&gt;
        &lt;<a href="#class_requirement">requirement</a>&gt;
          &lt;role/&gt;
          &lt;role-hint/&gt;
          &lt;field-name/&gt;
        &lt;/requirement&gt;
      &lt;/requirements&gt;
    &lt;/mojo&gt;
  &lt;/mojos&gt;

  &lt;dependencies&gt;
    &lt;<a href="#class_dependency">dependency</a>&gt;
      &lt;groupId/&gt;
      &lt;artifactId/&gt;
      &lt;version/&gt;
      &lt;type/&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/plugin&gt;
</source>
      <a name="class_plugin"/>
      <subsection name="plugin">
        <p>Root element of the 
<code>plugin.xml</code> file.</p>
        <table>
          <tr>
            <th>Element</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>
              <code>name</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>Name of the plugin.</td>
          </tr>
          <tr>
            <td>
              <code>description</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>Description of the plugin.</td>
          </tr>
          <tr>
            <td>
              <code>groupId</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>The group id of the plugin.</td>
          </tr>
          <tr>
            <td>
              <code>artifactId</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>The artifact id of the plugin.</td>
          </tr>
          <tr>
            <td>
              <code>version</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>The version of the plugin.</td>
          </tr>
          <tr>
            <td>
              <code>goalPrefix</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td></td>
          </tr>
          <tr>
            <td>
              <code>isolatedRealm</code>
            </td>
            <td>
              <code>boolean</code>
            </td>
            <td><br/><strong>Default value is</strong>: <code>false</code>.</td>
          </tr>
          <tr>
            <td>
              <code>inheritedByDefault</code>
            </td>
            <td>
              <code>boolean</code>
            </td>
            <td><br/><strong>Default value is</strong>: <code>true</code>.</td>
          </tr>
          <tr>
            <td>
              <code>mojos/<a href="#class_mojo">mojo</a>*</code>
            </td>
            <td>
              <code>List&lt;MojoDescriptor&gt;</code>
            </td>
            <td><b>(Many)</b> Description of each Mojo provided by the plugin.</td>
          </tr>
          <tr>
            <td>
              <code>dependencies/<a href="#class_dependency">dependency</a>*</code>
            </td>
            <td>
              <code>List&lt;Dependency&gt;</code>
            </td>
            <td><b>(Many)</b> A set of dependencies which the plugin requires in order to function. This enables the plugin to function independently of its POM (or at least to declare the libraries it needs to run).</td>
          </tr>
        </table>
      </subsection>
      <a name="class_mojo"/>
      <subsection name="mojo">
        <p>A Mojo description.</p>
        <table>
          <tr>
            <th>Element</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>
              <code>goal</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>The goal name for the Mojo, that users will reference from the command line to execute the Mojo directly, or inside a POM in order to provide Mojo-specific configuration.</td>
          </tr>
          <tr>
            <td>
              <code>description</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>The description of this Mojo's functionality.</td>
          </tr>
          <tr>
            <td>
              <code>implementation</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>The Mojo's fully-qualified class name (or script path in the case of non-Java Mojos).</td>
          </tr>
          <tr>
            <td>
              <code>language</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>The implementation language for this Mojo (java, beanshell, etc.).<br/><strong>Default value is</strong>: <code>java</code>.</td>
          </tr>
          <tr>
            <td>
              <code>phase</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>Defines a default phase to bind a mojo execution to if the user does not explicitly set a phase in the POM. 
<i>Note:</i> This will not automagically make a mojo run when the plugin declaration is added to the POM. It merely enables the user to omit the 
<code>&lt;phase&gt;</code> element from the surrounding 
<code>&lt;execution&gt;</code> element.</td>
          </tr>
          <tr>
            <td>
              <code>executePhase</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>Reference the invocation phase of the Mojo.</td>
          </tr>
          <tr>
            <td>
              <code>executeGoal</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>Reference the invocation goal of the Mojo.</td>
          </tr>
          <tr>
            <td>
              <code>executeLifecycle</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td></td>
          </tr>
          <tr>
            <td>
              <code>requiresDependencyResolution</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>Flags this Mojo as requiring the dependencies in the specified class path to be resolved before it can execute: 
<code>compile</code>, 
<code>runtime</code>, 
<code>test</code>, 
<code>compile+runtime</code> (since Maven 3.0) or 
<code>runtime+system</code> (since Maven 3.0)<br/><strong>Default value is</strong>: <code>runtime</code>.</td>
          </tr>
          <tr>
            <td>
              <code>requiresDependencyCollection</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>Flags this mojo as requiring information about the dependencies that would make up the specified class path. As the name suggests, this is similar to requiresDependencyResolution and supports the same values. The important difference is this will not resolve the files for the dependencies, i.e. the artifacts associated with a Maven project can lack a file. As such, this annotation is meant for mojos that only want to analyze the set of transitive dependencies, in particular during early lifecycle phases where full dependency resolution might fail due to projects which haven't been built yet.</td>
          </tr>
          <tr>
            <td>
              <code>requiresDirectInvocation</code>
            </td>
            <td>
              <code>boolean</code>
            </td>
            <td>Flags this Mojo to be invoked directly only.<br/><strong>Default value is</strong>: <code>false</code>.</td>
          </tr>
          <tr>
            <td>
              <code>requiresProject</code>
            </td>
            <td>
              <code>boolean</code>
            </td>
            <td>Flags this Mojo to require running inside of a project.<br/><strong>Default value is</strong>: <code>true</code>.</td>
          </tr>
          <tr>
            <td>
              <code>requiresReports</code>
            </td>
            <td>
              <code>boolean</code>
            </td>
            <td>Flags this Mojo to require running inside of a reports context. Unsupported since Maven 3.0.<br/><strong>Default value is</strong>: <code>false</code>.</td>
          </tr>
          <tr>
            <td>
              <code>requiresOnline</code>
            </td>
            <td>
              <code>boolean</code>
            </td>
            <td>Flags this Mojo to require online mode for its operation.<br/><strong>Default value is</strong>: <code>false</code>.</td>
          </tr>
          <tr>
            <td>
              <code>aggregator</code>
            </td>
            <td>
              <code>boolean</code>
            </td>
            <td>Flags this Mojo to run it in a multi module way, i.e. aggregate the build with the set of projects listed as modules.<br/><strong>Default value is</strong>: <code>false</code>.</td>
          </tr>
          <tr>
            <td>
              <code>inheritedByDefault</code>
            </td>
            <td>
              <code>boolean</code>
            </td>
            <td>Specify that the Mojo is inherited.<br/><strong>Default value is</strong>: <code>true</code>.</td>
          </tr>
          <tr>
            <td>
              <code>threadSafe</code>
            </td>
            <td>
              <code>boolean</code>
            </td>
            <td>Marks this mojo as being thread-safe, i.e. the mojo safely supports concurrent execution during parallel builds. Mojos without this annotation will make Maven output a warning when used during a parallel build session. Since Maven 3.0.<br/><strong>Default value is</strong>: <code>false</code>.</td>
          </tr>
          <tr>
            <td>
              <code>instantiationStrategy</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>Specify the instantiation strategy.<br/><strong>Default value is</strong>: <code>per-lookup</code>.</td>
          </tr>
          <tr>
            <td>
              <code>executionStrategy</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>Specify the execution strategy: 
<code>once-per-session</code>, 
<code>always</code>.<br/><strong>Default value is</strong>: <code>once-per-session</code>.</td>
          </tr>
          <tr>
            <td>
              <code>since</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>Specify the version when the Mojo was added to the API. Similar to Javadoc since.</td>
          </tr>
          <tr>
            <td>
              <code>deprecated</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>Specify the version when the Mojo was deprecated to the API. Similar to Javadoc deprecated. This will trigger a warning when a user tries to configure a parameter marked as deprecated.</td>
          </tr>
          <tr>
            <td>
              <code>configurator</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>The configurator type to use when injecting parameter values into this Mojo. The value is normally deduced from the Mojo's implementation language, but can be specified to allow a custom ComponentConfigurator implementation to be used.</td>
          </tr>
          <tr>
            <td>
              <code>composer</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td></td>
          </tr>
          <tr>
            <td>
              <code>parameters/<a href="#class_parameter">parameter</a>*</code>
            </td>
            <td>
              <code>List&lt;Parameter&gt;</code>
            </td>
            <td><b>(Many)</b> </td>
          </tr>
          <tr>
            <td>
              <code>configuration/<a href="#class_paramName">paramName</a>*</code>
            </td>
            <td>
              <code>List&lt;Configuration&gt;</code>
            </td>
            <td><b>(Many)</b> </td>
          </tr>
          <tr>
            <td>
              <code>requirements/<a href="#class_requirement">requirement</a>*</code>
            </td>
            <td>
              <code>List&lt;Requirement&gt;</code>
            </td>
            <td><b>(Many)</b> </td>
          </tr>
        </table>
      </subsection>
      <a name="class_parameter"/>
      <subsection name="parameter">
        <p>A phase mapping definition.</p>
        <table>
          <tr>
            <th>Element</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>
              <code>name</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>The name of the parameter, to be used while configuring this parameter from the Mojo's declared defaults or from the POM.</td>
          </tr>
          <tr>
            <td>
              <code>alias</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>Specifies an alias which can be used to configure this parameter from the POM. This is primarily useful to improve user-friendliness, where Mojo field names are not intuitive to the user or are otherwise not conducive to configuration via the POM.</td>
          </tr>
          <tr>
            <td>
              <code>type</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>The Java type for this parameter. This is used to validate the result of any expressions used to calculate the value which should be injected into the Mojo for this parameter.</td>
          </tr>
          <tr>
            <td>
              <code>required</code>
            </td>
            <td>
              <code>boolean</code>
            </td>
            <td>Whether this parameter is required for the Mojo to function. This is used to validate the configuration for a Mojo before it is injected, and before the Mojo is executed from some half-state.<br/><strong>Default value is</strong>: <code>false</code>.</td>
          </tr>
          <tr>
            <td>
              <code>editable</code>
            </td>
            <td>
              <code>boolean</code>
            </td>
            <td>Specifies that this parameter can be configured directly by the user (as in the case of POM-specified configuration). This is useful when you want to force the user to use common POM elements rather than plugin configurations, as in the case where you want to use the artifact's final name as a parameter. In this case, you want the user to modify 
<code>&lt;build&gt;&lt;finalName/&gt;&lt;/build&gt;</code> rather than specifying a value for finalName directly in the plugin configuration section. It is also useful to ensure that - for example - a List-typed parameter which expects items of type Artifact doesn't get a List full of Strings.<br/><strong>Default value is</strong>: <code>true</code>.</td>
          </tr>
          <tr>
            <td>
              <code>implementation</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td></td>
          </tr>
          <tr>
            <td>
              <code>description</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>The description of this parameter's use inside the Mojo.</td>
          </tr>
          <tr>
            <td>
              <code>since</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>Specify the version when the parameter was added to the API. Similar to Javadoc since.</td>
          </tr>
          <tr>
            <td>
              <code>deprecated</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>Specify the version when the parameter was deprecated to the API. Similar to Javadoc deprecated. This will trigger a warning when a user tries to configure a parameter marked as deprecated.</td>
          </tr>
        </table>
      </subsection>
      <a name="class_paramName"/>
      <subsection name="paramName">
        <p>A parameter configuration.</p>
        <p>
          <b>Element Content: </b>Parameter expression, to let user override default value with a system property, pom property or settings property.</p>
        <table>
          <tr>
            <th>Attribute</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>
              <code>implementation</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td></td>
          </tr>
          <tr>
            <td>
              <code>default-value</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>The default value, as an expression that will be evaluated at injection or run-time.</td>
          </tr>
        </table>
      </subsection>
      <a name="class_requirement"/>
      <subsection name="requirement">
        <p>Describes a component requirement.</p>
        <table>
          <tr>
            <th>Element</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>
              <code>role</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td></td>
          </tr>
          <tr>
            <td>
              <code>role-hint</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td></td>
          </tr>
          <tr>
            <td>
              <code>field-name</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>The field name which has this requirement.</td>
          </tr>
        </table>
      </subsection>
      <a name="class_dependency"/>
      <subsection name="dependency">
        <p>Definition of a dependency, needed by the plugin at runtime.</p>
        <table>
          <tr>
            <th>Element</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>
              <code>groupId</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>The group id of the dependency.</td>
          </tr>
          <tr>
            <td>
              <code>artifactId</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>The artifact id of the dependency.</td>
          </tr>
          <tr>
            <td>
              <code>version</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>The version of the dependency.</td>
          </tr>
          <tr>
            <td>
              <code>type</code>
            </td>
            <td>
              <code>String</code>
            </td>
            <td>The type of dependency.<br/><strong>Default value is</strong>: <code>jar</code>.</td>
          </tr>
        </table>
      </subsection>
    </section>
  </body>
</document>